unit UMonCai;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Data.DB,
  Datasnap.Provider, Datasnap.DBClient, Data.DBXOracle, Data.FMTBcd,
  Data.SqlExpr, Vcl.ComCtrls, UVarUni, Data.Win.ADODB, Vcl.Grids, Vcl.DBGrids,
  Vcl.Buttons, System.UITypes, IdBaseComponent, IdComponent, IdTCPConnection,
  IdTCPClient, IdExplicitTLSClientServerBase, IdMessageClient, IdSMTPBase,
  IdSMTP, IdMessage, IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack, IdSSL,
  IdSSLOpenSSL, IdSMTPRelay;

type
  TFrmMonCai = class(TForm)
    LCodBar: TLabel;
    ECodBar: TEdit;
    SQLCMonCai: TSQLConnection;
    SQLQConCai: TSQLQuery;
    SQLQMonCai: TSQLQuery;
    SBPrincipal: TStatusBar;
    SQLQOperador: TSQLQuery;
    SQLQGrid: TSQLQuery;
    DSGrid: TDataSource;
    SQLDSGrid: TSQLDataSet;
    LVGrid: TListView;
    BBEnvRel: TBitBtn;
    BBSair: TBitBtn;
    IdSMTP: TIdSMTP;
    SQLQEmail: TSQLQuery;
    IdMessage: TIdMessage;
    IdSSLIOHandlerSocketOpenSSL: TIdSSLIOHandlerSocketOpenSSL;
    SBLimpar: TSpeedButton;
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure BBSairClick(Sender: TObject);
    procedure BBEnvRelClick(Sender: TObject);
    procedure ECodBarKeyPress(Sender: TObject; var Key: Char);
    procedure SBLimparClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FrmMonCai: TFrmMonCai;
  vnCodEmp: Integer;
  vnCodFil: Integer;
  vaCodOri: String;
  vnNumOrp: Integer;
  vaMsg: String;

implementation

{$R *.dfm}

procedure TFrmMonCai.FormShow(Sender: TObject);
begin
  if SQLCMonCai.Connected then
    SQLCMonCai.Connected:= False;

  SQLCMonCai.Connected:= True;
  SBPrincipal.Panels[1].Text:= IntToStr(UVarUni.TClass.vnNumCad);
  SBPrincipal.Panels[3].Text:= UVarUni.TClass.vaNomOpe;
end;

procedure TFrmMonCai.SBLimparClick(Sender: TObject);
begin
  ECodBar.Clear;
end;

procedure TFrmMonCai.ECodBarKeyPress(Sender: TObject; var Key: Char);
var
  vaCodPro: String;
  vaCodDer: String;
  vaPerPro: String;
  vaNumCai: String;
  vaMinFab: String;
  vaSql   : String;
  vnTam   : Integer;
  vaDatSai: String;
  vaHorSai: String;
  it: TListItem;
  i: integer;
begin
  // Exemplo Código de Barras
  //02023616120024013120250600102
  //Produto: 02023616120024
  //Derivação: 0131
  //Período de produção: 202506
  //Caixa: 001
  //MiniFábrica: 02
  if key = Char(13) then
  begin
    vnTam:= Length(ECodBar.Text);
    if ((vnTam = 27) or (vnTam = 29)) then
    begin
      vaCodPro:= StringReplace(Copy(ECodBar.Text,1,14),'@','2',[rfReplaceAll, rfIgnoreCase]);
      vaCodDer:= StringReplace(Copy(ECodBar.Text,15,4),'@','2',[rfReplaceAll, rfIgnoreCase]);
      vaPerPro:= Copy(ECodBar.Text,19,6);
      vaNumCai:= Copy(ECodBar.Text,25,3);
      vaMinFab:= Copy(ECodBar.Text,28,2);

      if (vnTam = 29) then
      begin
        vaSql:= 'SELECT USU_CODEMP, ' +
                '       USU_CODFIL, ' +
                '       USU_CODORI, ' +
                '       USU_NUMORP, ' +
                '       USU_NUMCXA ' +
                '  FROM USU_TCONCAI ' +
                ' WHERE USU_CODPRO = :pCodPro' +
                '   AND USU_CODDER = :pCodDer' +
                '   AND USU_PERPRO = :pPerPro' +
                '   AND USU_NUMCXA = :pNumCxa' +
                '   AND USU_CODMNF = :pCodMnf';
      end
      else begin
        vaSql:= 'SELECT USU_CODEMP, ' +
                '       USU_CODFIL, ' +
                '       USU_CODORI, ' +
                '       USU_NUMORP, ' +
                '       USU_NUMCXA ' +
                '  FROM USU_TCONCAI ' +
                ' WHERE USU_CODPRO = :pCodPro' +
                '   AND USU_CODDER = :pCodDer' +
                '   AND USU_PERPRO = :pPerPro' +
                '   AND USU_NUMCXA = :pNumCxa';
      end;
      SQLQConCai.Active:= False;
      SQLQConCai.SQL.Clear;
      SQLQConCai.SQL.Add(vaSql);
      SQLQConCai.ParamByName('pCodPro').AsString:= vaCodPro;
      SQLQConCai.ParamByName('pCodDer').AsString:= vaCodDer;
      SQLQConCai.ParamByName('pPerPro').AsInteger:= StrToInt(vaPerPro);
      SQLQConCai.ParamByName('pNumCxa').AsInteger:= StrToInt(vaNumCai);
      Trim(vaMinFab);
      if (vaMinFab <> '') then
        SQLQConCai.ParamByName('pCodMnf').AsInteger:= StrToInt(vaMinFab);
      SQLQConCai.ExecSQL();
      SQLQConCai.Active:= True;
      vnCodEmp:= SQLQConCai.FieldByName('USU_CODEMP').AsInteger;
      vnCodFil:= SQLQConCai.FieldByName('USU_CODFIL').AsInteger;
      vaCodOri:= SQLQConCai.FieldByName('USU_CODORI').AsString;
      vnNumOrp:= SQLQConCai.FieldByName('USU_NUMORP').AsInteger;
      vaNumCai:= IntToStr(SQLQConCai.FieldByName('USU_NUMCXA').AsInteger);
      SQLQConCai.Active:= False;

      if (vnNumOrp <> 0) then
      begin
        SQLQMonCai.Active:= False;
        vaSql:= 'SELECT USU_NUMORP, ' +
                '       USU_USUSAI, ' +
                '       USU_USUENT ' +
                '  FROM USU_TMONCAI ' +
                ' WHERE USU_CODEMP = :pCodEmp ' +
                '   AND USU_CODFIL = :pCodFil ' +
                '   AND USU_CODORI = :pCodOri ' +
                '   AND USU_NUMORP = :pNumOrp ' +
                '   AND USU_NUMCXA = :pNumCxa';
        SQLQMonCai.SQL.Clear;
        SQLQMonCai.SQL.Add(vaSql);
        SQLQMonCai.ParamByName('pCodEmp').AsInteger:= vnCodEmp;
        SQLQMonCai.ParamByName('pCodFil').AsInteger:= vnCodFil;
        SQLQMonCai.ParamByName('pCodOri').AsString := vaCodOri;
        SQLQMonCai.ParamByName('pNumOrp').AsInteger:= vnNumOrp;
        SQLQMonCai.ParamByName('pNumCxa').AsInteger:= StrToInt(vaNumCai);
        SQLQMonCai.ExecSQL();
        SQLQMonCai.Active:= True;

        if (SQLQMonCai.FieldByName('USU_NUMORP').AsInteger = 0) then
        begin
          if (UVarUni.TClass.vaPodSai = 'S') then
          begin
            if (SQLQMonCai.FieldByName('USU_USUSAI').AsInteger = 0) then
            begin
              SQLQMonCai.Active:= False;
              vaSql:= 'INSERT INTO USU_TMONCAI(USU_CODEMP, ' +
                    '                        USU_CODFIL, ' +
                    '                        USU_CODORI, ' +
                    '                        USU_NUMORP, ' +
                    '                        USU_PERPRO, ' +
                    '                        USU_CODPRO, ' +
                    '                        USU_CODDER, ' +
                    '                        USU_NUMCXA, ' +
                    '                        USU_CODMNF, ' +
                    '                        USU_DATSAI, ' +
                    '                        USU_HORSAI, ' +
                    '                        USU_USUSAI, ' +
                    '                        USU_CXAENV) ' +
                    'VALUES(:pCodEmp, ' +
                    '       :pCodFil, ' +
                    '       :pCodOri, ' +
                    '       :pNumOrp, ' +
                    '       :pPerPro, ' +
                    '       :pCodPro, ' +
                    '       :pCodDer, ' +
                    '       :pNumCxa, ' +
                    '       :pCodMnf, ' +
                    '       :pDatSai, ' +
                    '       :pHorSai, ' +
                    '       :pUsuSai, ' +
                    '       :pCxaEnv)';
              SQLQMonCai.SQL.Clear;
              SQLQMonCai.SQL.Add(vaSql);
              vaDatSai:= FormatDateTime('DD/MM/YYYY', Now);
              vaHorSai:= FormatDateTime('HH:MM', Now);
              SQLQMonCai.ParamByName('pCodEmp').AsInteger:= vnCodEmp;
              SQLQMonCai.ParamByName('pCodFil').AsInteger:= vnCodFil;
              SQLQMonCai.ParamByName('pCodOri').AsString := vaCodOri;
              SQLQMonCai.ParamByName('pNumOrp').AsInteger:= vnNumOrp;
              SQLQMonCai.ParamByName('pPerPro').AsInteger:= StrToInt(vaPerPro);
              SQLQMonCai.ParamByName('pCodPro').AsString := vaCodPro;
              SQLQMonCai.ParamByName('pCodDer').AsString := vaCodDer;
              SQLQMonCai.ParamByName('pNumCxa').AsInteger:= StrToInt(vaNumCai);
              SQLQMonCai.ParamByName('pCodMnf').AsInteger:= StrToInt(vaMinFab);
              SQLQMonCai.ParamByName('pDatSai').AsString := vaDatSai;
              SQLQMonCai.ParamByName('pHorSai').AsString := vaHorSai;
              SQLQMonCai.ParamByName('pUsuSai').AsInteger:= UVarUni.TClass.vnNumCad;
              SQLQMonCai.ParamByName('pCxaEnv').AsString := 'N';
              SQLQMonCai.ExecSQL();
              {vaMsg:= 'Registro de Saída de Caixa ' + Char(13) + 'realizado com Sucesso!';
              MessageDlg(vaMsg, mtInformation, [mbOk], 0);}

              LVGrid.ViewStyle := vsReport;
              SQLDSGrid.CommandText:= 'SELECT USU_CODEMP AS "EMPRESA", ' +
                                      '       USU_CODFIL AS "FILIAL", ' +
                                      '       USU_CODORI AS "ORIGEM", ' +
                                      '       USU_NUMORP AS "ORDEM PROD.", ' +
                                      '       USU_PERPRO AS "PERÍODO PROD.", ' +
                                      '       USU_CODPRO AS "PRODUTO", ' +
                                      '       USU_CODDER AS "DERIVAÇÃO", ' +
                                      '       USU_NUMCXA AS "CAIXA", ' +
                                      '       USU_CODMNF AS "MINI FABRICA", ' +
                                      '       USU_DATSAI AS "DATA SAÍDA", ' +
                                      '       USU_HORSAI AS "HORA SAÍDA", ' +
                                      '       USU_USUSAI AS "USUÁRIO SAÍDA"' +
                                      '  FROM USU_TMONCAI ' +
                                      ' WHERE USU_CODEMP = :pCodEmp ' +
                                      '   AND USU_DATSAI = :pDatSai ' +
                                      '   AND USU_USUSAI = :pUsuSai ' +
                                      '   AND USU_CXAENV = ' + QuotedStr('N');
              SQLDSGrid.Params.ParamByName('pCodEmp').AsInteger:= vnCodEmp;
              SQLDSGrid.Params.ParamByName('pDatSai').AsString := vaDatSai;
              SQLDSGrid.Params.ParamByName('pUsuSai').AsInteger:= UVarUni.TClass.vnNumCad;
              SQLDSGrid.Open;

              Try
                LVGrid.Columns.Clear;
                LVGrid.Items.Clear;
                for i := 0 to pred(SQLDSGrid.Fields.Count) do
                begin
                  with LVGrid.Columns.Add do
                    Caption := SQLDSGrid.Fields[i].FieldName;
                end;
                while not SQLDSGrid.Eof do
                begin
                  it:= LVGrid.Items.Add;
                  it.Caption:= SQLDSGrid.Fields[0].AsString;
                  for i := 1 to pred(SQLDSGrid.Fields.Count) do
                    it.SubItems.Append(SQLDSGrid.Fields[i].AsString);
                  SQLDSGrid.Next;
                end;
              finally
                SQLDSGrid.Close;
              end;

              ECodBar.Clear;
              ECodBar.SetFocus;
            end
            else begin
              vaMsg:= 'Já Existe Saída para a Caixa!';
              MessageDlg(vaMsg, mtError, [mbOk], 0);
            end;
          end
          else begin
            vaMsg:= 'Operador Não Pode dar Saída de Caixa!';
            MessageDlg(vaMsg, mtError, [mbOk], 0);
          end;
        end
        else begin
          if (UVarUni.TClass.vaPodEnt = 'S') then
          begin
            if (SQLQMonCai.FieldByName('USU_USUENT').AsInteger = 0) then
            begin
              SQLQMonCai.Active:= False;
              vaSql:= 'UPDATE USU_TMONCAI ' +
                      '   SET USU_DATENT = :pDatEnt, ' +
                      '       USU_HORENT = :pHorEnt, ' +
                      '       USU_USUENT = :pUsuEnt, ' +
                      '       USU_CXAREC = :pCxaRec ' +
                      ' WHERE USU_CODEMP = :pCodEmp ' +
                      '   AND USU_CODFIL = :pCodFil ' +
                      '   AND USU_CODORI = :pCodOri ' +
                      '   AND USU_NUMORP = :pNumOrp ' +
                      '   AND USU_NUMCXA = :pNumCxa';
              SQLQMonCai.SQL.Clear;
              SQLQMonCai.SQL.Add(vaSql);
              SQLQMonCai.ParamByName('pCodEmp').AsInteger:= vnCodEmp;
              SQLQMonCai.ParamByName('pCodFil').AsInteger:= vnCodFil;
              SQLQMonCai.ParamByName('pCodOri').AsString := vaCodOri;
              SQLQMonCai.ParamByName('pNumOrp').AsInteger:= vnNumOrp;
              SQLQMonCai.ParamByName('pNumCxa').AsInteger:= StrToInt(vaNumCai);
              SQLQMonCai.ParamByName('pDatEnt').AsString := FormatDateTime('DD/MM/YYYY', Now);
              SQLQMonCai.ParamByName('pHorEnt').AsString := FormatDateTime('HH:MM', Now);
              SQLQMonCai.ParamByName('pUsuEnt').AsInteger:= UVarUni.TClass.vnNumCad;
              SQLQMonCai.ParamByName('pCxaRec').AsString := 'N';
              SQLQMonCai.ExecSQL();
              {vaMsg:= 'Registro de Entrada de ' + Char(13) + 'Caixa Realizado com Sucesso!';
              MessageDlg(vaMsg, mtInformation, [mbOk], 0);}

              LVGrid.ViewStyle := vsReport;
              SQLDSGrid.CommandText:= 'SELECT USU_CODEMP AS "EMPRESA", ' +
                                      '       USU_CODFIL AS "FILIAL", ' +
                                      '       USU_CODORI AS "ORIGEM", ' +
                                      '       USU_NUMORP AS "ORDEM PROD.", ' +
                                      '       USU_PERPRO AS "PERÍODO PROD.", ' +
                                      '       USU_CODPRO AS "PRODUTO", ' +
                                      '       USU_CODDER AS "DERIVAÇÃO", ' +
                                      '       USU_NUMCXA AS "CAIXA", ' +
                                      '       USU_CODMNF AS "MINI FABRICA", ' +
                                      '       USU_DATENT AS "DATA ENTRADA", ' +
                                      '       USU_HORENT AS "HORA ENTRADA", ' +
                                      '       USU_USUENT AS "USUÁRIO ENTRADA"' +
                                      '  FROM USU_TMONCAI ' +
                                      ' WHERE USU_CODEMP = :pCodEmp ' +
                                      '   AND USU_DATENT = :pDatEnt ' +
                                      '   AND USU_USUENT = :pUsuEnt ' +
                                      '   AND USU_CXAREC = ' + QuotedStr('N');
              SQLDSGrid.Params.ParamByName('pCodEmp').AsInteger:= vnCodEmp;
              SQLDSGrid.Params.ParamByName('pDatEnt').AsString := FormatDateTime('DD/MM/YYYY', Now);
              SQLDSGrid.Params.ParamByName('pUsuEnt').AsInteger:= UVarUni.TClass.vnNumCad;
              SQLDSGrid.Open;

              Try
                LVGrid.Columns.Clear;
                LVGrid.Items.Clear;
                for i := 0 to pred(SQLDSGrid.Fields.Count) do
                begin
                  with LVGrid.Columns.Add do
                    Caption := SQLDSGrid.Fields[i].FieldName;
                end;
                while not SQLDSGrid.Eof do
                begin
                  it:= LVGrid.Items.Add;
                  it.Caption:= SQLDSGrid.Fields[0].AsString;
                  for i := 1 to pred(SQLDSGrid.Fields.Count) do
                    it.SubItems.Append(SQLDSGrid.Fields[i].AsString);
                  SQLDSGrid.Next;
                end;
              finally
                SQLDSGrid.Close;
              end;

              ECodBar.Clear;
              ECodBar.SetFocus;
            end
            else begin
              vaMsg:= 'Já Existe Entrada para a Caixa!';
              MessageDlg(vaMsg, mtError, [mbOk], 0);
            end;
          end
          else begin
            vaMsg:= 'Operador Não Pode dar Entrada de Caixa!';
            MessageDlg(vaMsg, mtError, [mbOk], 0);
          end;
        end;
      end
      else begin
        vaMsg:= 'Não foi encontrado o registro ' + Char(13) + 'na tabela de Conferência de Caixa!';
        MessageDlg(vaMsg, mtError, [mbOk], 0);
      end;
    end
    else begin
      vaMsg:= 'Informe um código de barras válido!';
      MessageDlg(vaMsg, mtError, [mbOk], 0);
    end;
  end;
end;

procedure TFrmMonCai.BBEnvRelClick(Sender: TObject);
var
  vaTexto: String;
  vaCaixas: String;
begin
  if vnCodEmp = 0 then
    vnCodEmp:= 1;
  BBEnvRel.Enabled:= False;
  SQLQEmail.SQL.Clear;
  if (UVarUni.TClass.vaPodSai = 'S') then
  begin
    SQLQEmail.SQL.Add('SELECT USU_CODEMP, ' +
                      '       USU_CODFIL, ' +
                      '       USU_CODORI, ' +
                      '       USU_NUMORP, ' +
                      '       USU_PERPRO, ' +
                      '       USU_CODPRO, ' +
                      '       USU_CODDER, ' +
                      '       USU_NUMCXA, ' +
                      '       USU_CODMNF, ' +
                      '       USU_DATSAI, ' +
                      '       USU_HORSAI, ' +
                      '       USU_USUSAI ' +
                      '  FROM USU_TMONCAI ' +
                      ' WHERE USU_CODEMP = :pCodEmp ' +
                      '   AND USU_DATSAI = :pDatSai ' +
                      '   AND USU_USUSAI = :pUsuSai ' +
                      '   AND USU_CXAENV <> ' + QuotedStr('S'));
    vaTexto:= 'Caixas enviadas: ' + Char(13) + Char(13) +
              'EMPRESA FILIAL ORIGEM ORDEM PRD. PERÍODO PRD. PRODUTO             DERIVAÇÃO CAIXA MINI FABRICA DATA SAÍDA HORA SAÍDA OPERADOR SAÍDA';
  end
  else
  begin
    SQLQEmail.SQL.Add('SELECT USU_CODEMP, ' +
                      '       USU_CODFIL, ' +
                      '       USU_CODORI, ' +
                      '       USU_NUMORP, ' +
                      '       USU_PERPRO, ' +
                      '       USU_CODPRO, ' +
                      '       USU_CODDER, ' +
                      '       USU_NUMCXA, ' +
                      '       USU_CODMNF, ' +
                      '       USU_DATENT, ' +
                      '       USU_HORENT, ' +
                      '       USU_USUENT ' +
                      '  FROM USU_TMONCAI ' +
                      ' WHERE USU_CODEMP = :pCodEmp ' +
                      '   AND USU_DATENT = :pDatSai ' +
                      '   AND USU_USUENT = :pUsuSai ' +
                      '   AND USU_CXAREC <> ' + QuotedStr('S'));
    vaTexto:= 'Caixas Recebidas: ' + Char(13) + Char(13) +
              'EMPRESA FILIAL ORIGEM ORDEM PRD. PERÍODO PRD. PRODUTO             DERIVAÇÃO CAIXA MINI FABRICA DATA ENTRADA HORA ENTRADA OPERADOR ENTRADA';
  end;
  SQLQEmail.ParamByName('pCodEmp').AsInteger:= vnCodEmp;
  SQLQEmail.Params.ParamByName('pDatSai').AsString := FormatDateTime('DD/MM/YYYY', Now);
  SQLQEmail.Params.ParamByName('pUsuSai').AsInteger:= UVarUni.TClass.vnNumCad;
  SQLQEmail.ExecSQL();
  SQLQEmail.Active:= True;

  vaCaixas:= '';
  while Not(SQLQEmail.Eof) do
  begin
    if (UVarUni.TClass.vaPodSai = 'S') then
      vaCaixas:= vaCaixas + IntToStr(SQLQEmail.FieldByName('USU_CODEMP').AsInteger) + '              ' +
                 IntToStr(SQLQEmail.FieldByName('USU_CODFIL').AsInteger) + '         ' +
                 SQLQEmail.FieldByName('USU_CODORI').AsString + '          ' +
                 IntToStr(SQLQEmail.FieldByName('USU_NUMORP').AsInteger) + '              ' +
                 IntToStr(SQLQEmail.FieldByName('USU_PERPRO').AsInteger) + '            ' +
                 SQLQEmail.FieldByName('USU_CODPRO').AsString + '  ' +
                 SQLQEmail.FieldByName('USU_CODDER').AsString + '             ' +
                 IntToStr(SQLQEmail.FieldByName('USU_NUMCXA').AsInteger) + '         ' +
                 IntToStr(SQLQEmail.FieldByName('USU_CODMNF').AsInteger) + '                     ' +
                 SQLQEmail.FieldByName('USU_DATSAI').AsString + '   ' +
                 SQLQEmail.FieldByName('USU_HORSAI').AsString + '             ' +
                 IntToStr(SQLQEmail.FieldByName('USU_USUSAI').AsInteger) + Char(13)
    else
      vaCaixas:= vaCaixas + IntToStr(SQLQEmail.FieldByName('USU_CODEMP').AsInteger) + '              ' +
                 IntToStr(SQLQEmail.FieldByName('USU_CODFIL').AsInteger) + '         ' +
                 SQLQEmail.FieldByName('USU_CODORI').AsString + '          ' +
                 IntToStr(SQLQEmail.FieldByName('USU_NUMORP').AsInteger) + '              ' +
                 IntToStr(SQLQEmail.FieldByName('USU_PERPRO').AsInteger) + '            ' +
                 SQLQEmail.FieldByName('USU_CODPRO').AsString + '  ' +
                 SQLQEmail.FieldByName('USU_CODDER').AsString + '             ' +
                 IntToStr(SQLQEmail.FieldByName('USU_NUMCXA').AsInteger) + '         ' +
                 IntToStr(SQLQEmail.FieldByName('USU_CODMNF').AsInteger) + '                     ' +
                 SQLQEmail.FieldByName('USU_DATENT').AsString + '       ' +
                 SQLQEmail.FieldByName('USU_HORENT').AsString + '                   ' +
                 IntToStr(SQLQEmail.FieldByName('USU_USUENT').AsInteger) + Char(13);
    SQLQEmail.Next;
  end;
  SQLQEmail.Close;

  if vaCaixas <> '' then
  begin
    try
      IdSMTP.Host:= '192.168.203.84';
      IdSMTP.Port:= 25;
      IdSMTP.ConnectTimeout:= 0;
      IdSMTP.AuthType:= satDefault;
      IdSMTP.ReadTimeout:= 0;
      IdMessage.From.Address:= 'sistema.sapiens@tortugaonline.com.br';
      if (UVarUni.TClass.vaPodSai = 'S') then
        IdMessage.Subject:= 'Caixas enviadas - ' + FormatDateTime('DD/MM/YYYY HH:MM', Now)
      else
        IdMessage.Subject:= 'Caixas Recebidas - ' + FormatDateTime('DD/MM/YYYY HH:MM', Now);
      IdMessage.ContentType:= 'multipart/mixed';
      IdMessage.Recipients.EMailAddresses:= 'luciano.santos@tortugaonline.com.br';
      IdMessage.Body.Text:= vaTexto + Char(13) + vaCaixas;

      if not IdSMTP.Connected then
        IdSMTP.Connect();
      try
        IdSMTP.Send(IdMessage);
        vaMsg:= 'Relatório enviado por e-mail com Sucesso!';
        MessageDlg(vaMsg, mtInformation, [mbOk], 0);
      finally
        IdSMTP.Disconnect;
        SQLQMonCai.Active:= False;
        SQLQMonCai.SQL.Clear;
        if (UVarUni.TClass.vaPodSai = 'S') then
          SQLQMonCai.SQL.Add('UPDATE USU_TMONCAI ' +
                             '   SET USU_CXAENV = ' + QuotedStr('S') +
                             ' WHERE USU_DATSAI = :pDatSai ' +
                             '   AND USU_USUSAI = :pUsuSai')
        else
          SQLQMonCai.SQL.Add('UPDATE USU_TMONCAI ' +
                             '   SET USU_CXAREC = ' + QuotedStr('S') +
                             ' WHERE USU_DATENT = :pDatSai ' +
                             '   AND USU_USUENT = :pUsuSai');
        SQLQMonCai.ParamByName('pDatSai').AsString := FormatDateTime('DD/MM/YYYY', Now);
        SQLQMonCai.ParamByName('pUsuSai').AsInteger:= UVarUni.TClass.vnNumCad;
        SQLQMonCai.ExecSQL();
      end;
    finally
      IdMessage.Free;
      IdSMTP.Free;
    end;
  end
  else begin
    vaMsg:= 'Não existem caixas para enviar e-mail!';
    MessageDlg(vaMsg, mtError, [mbOk], 0);
  end;
  BBEnvRel.Enabled:= True;
end;

procedure TFrmMonCai.BBSairClick(Sender: TObject);
begin
  SQLCMonCai.Connected:= False;
  Application.Terminate;
end;

procedure TFrmMonCai.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SQLCMonCai.Connected:= False;
  Application.Terminate;
end;


end.
